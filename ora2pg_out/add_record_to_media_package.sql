-- Generated by Ora2Pg, the Oracle database Schema converter, version 19.1
-- Copyright 2000-2018 Gilles DAROLD. All rights reserved.
-- DATASOURCE: dbi:Oracle:host=10.1.0.35;sid=ORCL;port=1521

SET client_encoding TO 'UTF8';
SET search_path = kamis5_dev_copy;


--
-- dblink wrapper to call function mark.add_record_to_media() as an autonomous transaction
--
CREATE EXTENSION IF NOT EXISTS dblink;

CREATE OR REPLACE FUNCTION mark.add_record_to_media ( p_id_bas numeric, p_source_file text, p_name text, p_filename text, p_ext text, p_pyramida numeric, p_filesize numeric, p_filecsum numeric, p_server_id text, p_status numeric, p_img text,          -- In HEX format
 names TSmalStrs,             -- Название и значения переменных для Bind'инга
 TYPES TSmalStrs,             -- 'v', 'd', 'n'
 vals TLargeStrs, prev_medcode numeric       -- Ссылка на Главное изображение
 ) RETURNS varchar AS $body$
DECLARE
	-- Change this to reflect the dblink connection string
	v_conn_str  text := format('port=%s dbname=%s user=%s', current_setting('port'), current_database(), current_user);
	v_query     text;

	v_ret	varchar;
BEGIN
	v_query := 'SELECT * FROM mark.add_record_to_media_atx ( ' || quote_nullable(p_id_bas) || ',' || quote_nullable(p_source_file) || ',' || quote_nullable(p_name) || ',' || quote_nullable(p_filename) || ',' || quote_nullable(p_ext) || ',' || quote_nullable(p_pyramida) || ',' || quote_nullable(p_filesize) || ',' || quote_nullable(p_filecsum) || ',' || quote_nullable(p_server_id) || ',' || quote_nullable(p_status) || ',' || quote_nullable(p_img) || ',' || quote_nullable(
) || ',' || quote_nullable(
) || ',' || quote_nullable(
) || ',' || quote_nullable(prev_medcode) || ' )';
	SELECT * INTO v_ret FROM dblink(v_conn_str, v_query) AS p (ret varchar);
	RETURN v_ret;

END;
$body$ LANGUAGE plpgsql SECURITY DEFINER;


CREATE OR REPLACE FUNCTION mark.add_record_to_media_atx ( p_id_bas numeric, p_source_file text, p_name text, p_filename text, p_ext text, p_pyramida numeric, p_filesize numeric, p_filecsum numeric, p_server_id text, p_status numeric, p_img text,
 names TSmalStrs,
 TYPES TSmalStrs,
 vals TLargeStrs, prev_medcode numeric 
 ) RETURNS varchar AS $body$
DECLARE
raw_buffer bytea; -- (32766);
  sql_comm varchar(2000);
  fields_list varchar(4000);
  cur numeric;
  i numeric;
  res numeric;
  v_h_server numeric;

BEGIN
  raw_buffer:=HEXTORAW(p_img);

  begin
       EXECUTE 'select h_server from s_img_server  where id = :p_server_id' into STRICT v_h_server using p_server_id;
       exception when others then null;
  end;
  EXECUTE 'INSERT INTO '||DB_DDL.usrname||'.media
      (id_bas, source_file, NAME,
      filename, ext, pyramida,
         filesize, filecsum, server_id, status,
    filecdate,
      img, h_server)
      VALUES
      (:p_id_bas, :p_source_file, :p_name,
      :p_filename, :p_ext, :p_pyramida,
      :p_filesize, :p_filecsum, :p_server_id, :p_status,
    SYSDATE,
      :raw_buffer, :h_server )'
     using p_id_bas, p_source_file, p_name,
      p_filename, p_ext, p_pyramida,
      p_filesize, p_filecsum, p_server_id, p_status,
      raw_buffer, v_h_server;

  /*INSERT INTO media
      (id_bas, source_file, NAME,
      filename, ext, pyramida,
         filesize, filecsum, server_id, status,
    filecdate,
      img)
      VALUES
      (p_id_bas, p_source_file, p_name,
      p_filename, p_ext, p_pyramida,
      p_filesize, p_filecsum, p_server_id, p_status,
    SYSDATE,
      raw_buffer );*/
  IF names IS NOT NULL AND names.COUNT>0 THEN
/*
    IF names.count<>vals.count THEN
      ROLLBACK;
      RETURN 'Field names and values lists has other length.';
    END IF;
*/
      cur := DBMS_SQL.OPEN_CURSOR;
    -- Требуется запись дополнительных полей, придется работать через DBMS_SQL
    -- Создаем список дополнительных полей для вставки
    fields_list:=NULL;
    FOR i IN 1..names.COUNT LOOP

      IF vals.EXISTS(i) AND vals(i) IS NOT NULL THEN
        IF TYPES(i) IN ('c','v') THEN
          fields_list:=names(i)||'=:'||names(i);
        ELSIF TYPES(i) IN ('n') THEN
          fields_list:=names(i)||'=TO_NUMBER(:'||names(i)||')';
        ELSIF TYPES(i) IN ('d') THEN
          fields_list:=names(i)||'=TO_DATE(:'||names(i)||',''DD.MM.YYYY'')';
        ELSIF TYPES(i) IN ('dt') THEN
          fields_list:=names(i)||'=TO_DATE(:'||names(i)||',''DD.MM.YYYY HH24:MI:SS'')';
        END IF;
      ELSE
        fields_list:=names(i)||'=NULL';
      END IF;

      -- Создание SQL-команды
      sql_comm:='UPDATE '||DB_DDL.usrname||'.media SET '||fields_list||' WHERE id_bas='||p_id_bas;  -- , :img
      -- Prepare
      DBMS_SQL.PARSE(cur, sql_comm, DBMS_SQL.NATIVE);
      -- Определяем BIND-переменные
      IF TYPES(i) IN ('c','v', 'n','d', 'dt') AND vals.EXISTS(i) AND vals(i) IS NOT NULL THEN
         DBMS_SQL.BIND_VARIABLE( cur, names(i), vals(i) );
      END IF;

          -- Execute
      BEGIN
           /*
             Выполнение запроса может выбросить исключение из-за неправильного преобразования плавающих чисел.
             Это зависит от настроек десятичного разделителя.
             На данный момент просто отлавливаем ошибку и блокируем её.
             Added by mac, 25.04.2009
           */
          res:=DBMS_SQL.EXECUTE( cur );
      EXCEPTION WHEN others THEN
        NULL;
      END;

    END LOOP;

      DBMS_SQL.CLOSE_CURSOR( cur );
  END IF;
  IF prev_medcode IS NOT NULL THEN
    INSERT INTO med_med(ID, medcode, medcode2 ) VALUES ( nextval('seq_s'), prev_medcode, p_id_bas );
  END IF;

  RETURN NULL;
EXCEPTION WHEN OTHERS THEN
  IF DBMS_SQL.IS_OPEN( cur ) THEN
    DBMS_SQL.CLOSE_CURSOR( cur );
  END IF;
  ROLLBACK;
  RETURN DBMS_UTILITY.FORMAT_ERROR_STACK || ' ' ||DBMS_UTILITY.FORMAT_ERROR_BACKTRACE
         ||' p_filename, p_ext= '||p_filename||'/'||p_ext;
END;

$body$
LANGUAGE PLPGSQL
SECURITY DEFINER
;
-- REVOKE ALL ON FUNCTION mark.add_record_to_media ( p_id_bas numeric, p_source_file text, p_name text, p_filename text, p_ext text, p_pyramida numeric, p_filesize numeric, p_filecsum numeric, p_server_id text, p_status numeric, p_img text, names TSmalStrs, TYPES TSmalStrs, vals TLargeStrs, prev_medcode numeric  ) FROM PUBLIC;
